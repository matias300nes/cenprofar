<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAGACoHAAAFgAAACgAAAAwAAAAYAAAAAEAGAAAAAAAgBwAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACl1e+RyOh8ut9ssdldo89an8lTlL1Sj7VKgqdSg6NZ
        gZ5tj6eFn7MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACk1vGHyu1/x+x6wuhzwehmuuhZ
        t+pOs+xAquhDp+A0l9A4k8kkfbEpfKwXZJEibJgcYYwub5c5dJxZi66HqsQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACT
        zu5vv+ltv+l7yO2G0fCCz+540PVnxvNawfRNuvU/sO9DrOYzmtU5mM0kgrcpgbMVaJghdKMZa5omeqoh
        d6kpf7EtgLI9hLJ3p8cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAB2wuxeuutqxfJ0zPSA0/WG1vSD0PB7zfJtwu1ju+xXtexMq+VQq+BC
        mtBEmswwhLcwgrIda5kmdqQba5kme6oheasqhbgujMAujMI0jsNbnMgAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACc0u9Yue5jw/NtyfV2zPSH0PGW
        0++d0uyc1PCOzu6O0PKCzfN8y/J2yPJxxO5pv+tgtuVdsN1apc9ZostRlr1Mk7w6h7Qzh7kwjL8vj8Q4
        l808mM2Lu9kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACNzO9Xuu9lwvF2yPGIzvGZ1vKa2vSU2/aI2vl81vl00vhuzfVpxe9jvelctOFUq9tOpNRJmslF
        kL5IjrlJh69MhKlJfqJFf6U3fKgwgLA2jsE+mc19ttgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLy+5Yt+xwxfGI0/OP2/WD3Ph62/py1fhsy/Nsxe91
        xu10w+psvediuulTseZKsOo/peA+odkzkcgzjMAjeKsmdKIYYY0la5YfYo0pbJctcZ00fatnncAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACNye1iu+p8
        0vKJ4/qT6fyF2vZnw+1mvutwwut8x+uL1PKAz/ByyvFlxfVTvPJJuvY9res/qeMyl9E0lMkhfrMke6sU
        Z5cidaMYa5sjeKgnfK0rfa4zf7BZlLoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACPy+tkveWU5/qY6vt51PNevexgvO1vyPN4zfN/0fOM2veA0fJ0yO9owvBZ
        tupSte1HqOJIpNw7lMs8k8YpfrEqe6oYZ5UkdaIZbJsjeqoogbMtiLotjMEvjME8j79PjbdJe6VLeaFM
        dppXfZxfgJp1kqqSqbsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChz+lbtN9+3viF4/tjwe5ZvPBm
        xPRyzPZ7zfOGzu+c1/GW0O2VzeyKye2CxOl7w+x0v+lvv+lluORluudasuFbsNxUos5VocpHkLtCjro5
        irgxibsujcEyksc4mM04j8Qmb6cgZZ4WWI4cXI4RT30dXosdXoowcZo/eqBkkrOVtMkAAAAAAAAAAAAA
        AAAAAAAAAACAweNju+RuzfBXuuxbvfBmwfF1x/GDy++Qzu6WzeuFweNztt1hqtVapM5QmsZOl8FHkbtH
        kbpIkrpMmsNUp9FbtOBhvuppxPByx/Fzwephsd1CntE3lco4l808mM0pdq4gaaMVW5McYJUQU4QfZ5kX
        ZpcnfKwle6wrgLIygrNKjLiLs88AAAAAAAAAAAAAAAAAAACgz+lqt+BRseRauOxlvOt0wux4w+p0wOln
        ueZas+VOruZApeFBots0lMw4kMUmeq0qeKcbYo8kaZUiZY8scJkyeaQ9i7hJotFWuetdxvhYwvdPtetD
        o9k7lswtdq0naaEcXZIhY5YVVYYiaJgZZpcofawmfrAth7oxjcExj8Q5kMRsp80AAAAAAAAAAAAAAAAA
        AACVzexeteZnvOl3xOqEze6F0O95zfNnxPBbwfRNuvQ/sfBCrOczm9c5mc8jgrgogLIVaZkidKMXaZgj
        d6YidaUsfq8vf7A4iLlIotJRu+9Sw/tTvvVGpNo8hbs8grk7grc+hbtAhrlJksJKk8BOmcNAjrs2i7wy
        jsE0ksY6mc08lswAAAAAAAAAAAAAAACTze5huulowe9zyfF+0fOH1vWG1vN6z/Rpwu5fve9Ste1Fq+dH
        p985l889lsoof7Mrf7AYaJcjc6IXaZgkeqkieqsuiLouir8tir80jcFEnc1Uve9k0f5Xu+80e64pZZcn
        Y5MsaJYwbZs9ga9Ol8Nlr9dvuN9qtt9Op9g8mc46mM05mM6IutkAAAAAAAAAAABauexhwfJtyfV2zPOC
        0PKP0/CW0u2U0O+HyOyHyu99xvB4xO9ywu5tvupluuhZr91Wq9hOnchNmsVCi7U9i7cxgrEyiboui78v
        j8Q2lss5l8xZstuD5fxav/Ase7QgZZ0WV4wbWo0RTnweXYsdX4sscZw1e6dEj7xModJOreFHqN46mdCH
        t9kAAAAAAACTz+9Wue1jwfJyyPOEzPGZ1PGe1fCc1e+Mz+5+yet1xelrwOdnv+Ziu+Nhu+RfvOdgwu1g
        xfJjxvNoyfZtyPRwxvFyv+dms91IoNE2k8k3lcs7ms9Uq9dpx/BAm9QgbqwgaaQVW5IcYJUQVIQgapoY
        aJgne6oleassfrAwgbM3ibtGn9JIpdqJutoAAAAAAACQy+5VtOlqwfB7yPF+yO94xu1uv+djuONYr95Q
        qdxIn9JEmsw9j8A6h7QzfKg1eqMvcpo3eqI7galJlr5Tq9RcvOhgxvVjyfpdxPhRt+1Eptw8mtBBl809
        j8gvebQjaKMlaKEZWpAfYZMWWokndKEaa5kofa0mf7Ath7oxjcExjcI2jsM+lMiLvdwAAAAAAACLyepZ
        s+Zqvuxzwep+yOt6xupxwutjv+9Tt+1LtfI+qeZAp+Ayls8wkMUifLAmeagWY5MjcJwcZpMocZ4ud6Q7
        hbBKnMVXtN9Zw/RTxPtUwfhLruREk8hGisBDhrs/gbc8grg4f7Y/h7tOmMZWosxKkrtGkr04ibcyiboy
        jcE0ksY6mM05lMiRv9sAAAAAAABrvOhmvOp0xu5+ze+K2PR+0fNxzPRjxvZTu/JMufU+qedBqOEzls8x
        kMYhfbEme6sWZ5cld6Ubbp4mfKwof7EqgrQvhrg2irtJoM1WvOxcy/1dx/hEmc81erExcqYubZ8ta50s
        a5wyc6JFjbhVoMlfq9Nrtt1xu+JmstxKotQ6lss6mM05mM6IutkAAABfvOxhv+9uyPJ4z/WA0vOM2PSC
        zu95x+1wwu5muepguOxUq+FZruBMoNNEmcs1iLk4h7Qnc6AufKghcJ8ofKwogLIrh7owjsI0ksc1ksdG
        n9B52vVs1PtDoNondbYmbqsfZJ4gYpoXVoodXY0YXoknbJYjZpExdqE7gq5MmMVQqdpOruNFpds6mM+H
        udlwwO1bv/Jlw/JxyPJ+zPGP0O+m2fGi1e+f1vGS0/OP0/SK1PiB0PZ80Ph1zPZwy/drx/NqxPBmu+Zp
        ueJirdZdps9OmsY6j8Azj8I2lMg4mc4/ms1kveVWuOs5ldYlfMEldbYdaakgaaQWXZUibqAVZ5Ymd6UZ
        apkneakleKgsfa4xgrM6jr9JpNhGpNuHudpmvu1dvvFqwvCCy/GS0vKf2/Wf3/eX3vmS4PyN3/2I3v6F
        3f6B2/592v562P931/5x0vltzfdrzfdszfhqzPhwzPh0y/ZrwO1QreBBn9Q4mM49mc5IntM9lNE0iMsq
        eLopcrAgZ6Mla6MgbKEsfawYZ5Und6Uaa5sofa0mfrAsh7kwjMAwjME2jsJBl8uLvt1lu+tlvu9+zPGX
        3fWb4/eW4/qV5PyU5P6S5P+O4v6K3/yF2vl/1/h71Pd30vZ31fd41vRuy/Btzvdw1Ptw1ftt0/pmz/pe
        yvtYxfpUvvVJruQ/ms9Nm9BSm9JMlMxHisJBhLs7f7ZEjsNUqNdWqtdNmsVQm8VAibQ/jLgyhLQvh7kx
        jcE0ksc5mMw5k8eSwN1pu+h0xu2Y4faj6vyl7v2i7P2Z5/qR4fmO3/qS4vqW5PmJ3PiD2/t/2vp71/Z6
        1vN93PZ52fZx0fVozPZmzfto0f5r1P5r1f1hzvtVxftXxftOreJJntNOpNhGmc5BjsM8h7w5hbpElshc
        ueVgv+xiwO1lwe5rw+5yxO1xveVhrtlFns84lMk6mM05l82LutlsuuaC0O6u8f6q7v2i6vub5/uZ5/2g
        6/2h6/uO4veH3fd+1/Z60/Z71vd71/R+3Pd+3vt11/t22Ptz1vls0fhlzfpgy/thzf1q1P1k0f1y2/5b
        wfNCnNU5i8cygLwsdK4pbKQkZJorbqAxe6g2fKcucZs1eqQ5gq1ElMFRqddcuupavvJPs+lDo9k5mM6H
        udmCwuZrvuSc5vqm7f+l7f+i7P2g6vut8f6q9P+T7f+H5/6B4vx10fF30fJ72PZ31PR00/Vy0/Zz1fhx
        1vtr0fpo0f1kz/1izf1x1f6M5v+F5f5Yv/NEot83kNEwiMwmeb0ldLMdaqcqfbQhe7Aqfq0WZZMkcZ4a
        ZZEncZ8pc6I0gbA+k8RKqt9RuO5Hp96HudkAAAB9wOZtv+aK2PSZ5fye6v6t8P6w9P6g7/+P6f+I5PyA
        3Pl92fl51vdz0fRuzfNx0vdz1fxx1v5t1P9s0/9x1P+F2v+j4/+s6v+O4PxixfVNsOlBouE2k9Ywis8m
        er8nd7clebYzj8UhfbIqgLAWaJcneKYabJsofa0mfa8rg7Uvhrkyh7o+l8tNrOGNweEAAAAAAAAAAAB3
        v+Vsv+Z3zO6F2PaN3/uN4f2L4f6I4f2C3fp81/Z40/Z41vpz1/xt0/lt0vh43fyF5P+R5v+d5/6h4/2Q
        2PpvyPVevvBWsuhTquNIndpCks9Cj8xFjcZMms9Hms9Ln885i7w7i7onc6Awfaohb50rfa0nfrAsh7ox
        jsIzkcU2k8g9lsqZx+MAAAAAAAAAAAAAAAAAAACZ0Ox+xutxw+tqwu5pxvJsy/VqzfdozPhnzflnzPpo
        0Ptr1Ppt1vlv1fhq0PdkyPddwPRWuvFWtu5guOxvwO9vu+lvuuhoteRrtuNvu+Z1welxw+tpvOdnvehg
        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
        wetauu50x/GO1fSW3PSV4PiV4/yU5f6T5f+P4/+K4P2F3PuB2fp91/l51fl31fp31fZwzfFv0Pdw1Ppv
        1Plr0PlmzfphyvpbxfpUu/FIquE6mNCGudkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB3wOppwO2K1vOg6Pun7v2j7PyZ5vqR4fmP4PuQ4vyU4/mK3feD
        2vh/2Pd71vV30vJ72PR41/Vv0PRpzfdo0Pxr1P5u1v5q1PxgzPtVxftVwvpLreOHutoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7wul2x+ur7fyp7vyh
        6vud6Pyc6f2b6fyc6PqQ4PeL3vaE2vd+1/h+2Pl71/Z82vaB4ft52vt42/x01/lr0PdkzPpgzPxjz/1q
        1P1hzvxm0/5exfaQxuUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAACOyOlou+Kf5/uo7/+n7v6i7Pya5/qk7P2v9f+Y7f6H5fyA4Pp10fF2z/B92vd61vR1
        0/Vx0fdx0vdy1flt0vlp0fxl0P1fzP1m0P573f+L6/9ozPcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1veRxwuaT3vee6f2f6v+p7/6z8/6o
        8/+T6/+J5v6C4Pt92/p41PZz0PNxzvN00/d11/pz1/1v1f9q0v5o0P9w0/+I2v+h5v+f6f561fiO0vUA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACWzetuu+NyxeqA0vKQ3/qa5v2V5v6P5P+L5P6D3fl81/Z61fZ41vpy1Pprz/dpzvdy1/t83v+H
        4v+Y5v+o5/+p4vuS2PmD0PYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACExulxwOpsw+xsyPBuzPNy0Plz0/tz
        1ftu0flrzvlv1v5w2/5w2/xz2/l43Pp92Pl+0viE0PaU1PUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACc1PKPz/KCyvF8y/N6y/V2yfV8zfaAzfSI0PST1POi2fUAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD/gAP///8AAPgAAD///wAA4AAAD///AADAAAAH//8AAIAAAAP//wAAgAAAA///
        AACAAAAD//8AAIAAAAH//wAAgAAAAAD/AACAAAAAAA8AAMAAAAAAAwAA4AAAAAABAADwAAAAAAEAAOAA
        AAAAAAAA4AAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAIAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAADgAAAAAAAAAPgA
        AAAAAAAA/+BgAAAAAAD//+AAAAAAAP//4AAAAAAA///gAAAAAAD//+AAAAAAAP//4AAAAAAA///gAAAA
        AAD//+AAAAAAAP//4AAAAAAA///gAAAAAAD//+AAAAAAAP//4AAAAAAA///gAAAAAAD//+AAAAAAAP//
        4AAAAQAA///wAAABAAD///gAAAcAAP///wAAHwAA////8AH/AAA=
</value>
  </data>
</root>