Imports Microsoft.ApplicationBlocks.Data
Imports Utiles
Imports Utiles.Util
Imports System.Data.SqlClient
Imports ReportesNet


Public Class frmConsolidaciones

    Dim bolpoliticas As Boolean

    Dim RemitosAsociados As String

    'Variables para la grilla
    Dim editando_celda As Boolean
    Dim FILA As Integer
    Dim COLUMNA As Integer
    Private RefrescarGrid As Boolean
    Private ds_2 As DataSet

    'Para el clic derecho sobre la grilla de materiales
    Dim Cell_X As Integer
    Dim Cell_Y As Integer

    'Para el combo de busqueda
    Dim ID_Buscado As Long
    Dim Nombre_Buscado As Long

    'Varible de transaccion
    Dim tran As SqlClient.SqlTransaction
    Dim conn_del_form As SqlClient.SqlConnection = Nothing

    Dim band As Integer, bandIVA As Boolean
    'BANDIVA SE UTILIZA PARA SABER SI EXISTEN VARIOS PORCENTAJES DE IVA DIFERENTES EN EL PAGO

    'constantes para identificar las columnas de la grilla por nombre 
    ' en vez de número

    Enum ColumnasDelGridItems
        Id = 0
        Id_Empleado = 1
        Fecha = 2
        Dia = 3
        Hora_Ingreso = 4
        Hora_Egreso = 5
        Llegada_Tarde = 6
        Justificada = 7
        Nota = 8
        PrecioHora = 9
        Horas_Normales = 10
        Monto_Hs_Normales = 11
        Horas_Extras_50 = 12
        Monto_Hs_Ext_50 = 13
        Horas_Extras_100 = 14
        Monto_Hs_Ext_100 = 15
        Total_dia = 16
        Consolidado = 17
    End Enum

    'Auxiliares para guardar
    Dim cod_aux As String

    'Auxiliares para chequear lo digitado en la columna cantidad
    Dim qty_digitada As String

    Dim permitir_evento_CellChanged As Boolean


#Region "   Eventos"

    Private Sub frmFacturacion_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyDown
        Select Case e.KeyCode
            Case Keys.F3 'nuevo
                'If bolModo = True Then
                '    If MessageBox.Show("No ha guardado la Factura Nueva que está realizando. ¿Está seguro que desea continuar sin Grabar y hacer una Nueva Factura?", "Atención", MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then
                '        btnNuevo_Click(sender, e)
                '    End If
                'Else
                btnNuevo_Click(sender, e)
                'End If
            Case Keys.F4 'grabar
                btnGuardar_Click(sender, e)
        End Select
    End Sub

    Private Sub frmFacturacion_Gestion_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        band = 0
        configurarform()
        asignarTags()

        LlenarComboEmpleados()

        SQL = "exec spConsolidaciones_Select_All @Eliminado = 0"

        LlenarGrilla()

        Permitir = True

        CargarCajas()

        PrepararBotones()

        If bolModo = True Then
            LlenarGridItems(CType(cmbEmpleado.SelectedValue, Long))
            btnNuevo_Click(sender, e)
            chkNuevoIngreso.Checked = False
            chkNuevoIngreso_CheckedChanged(sender, e)
        Else
            chkNuevoIngreso.Enabled = bolModo
        End If

        permitir_evento_CellChanged = True

        grd_CurrentCellChanged(sender, e)

        band = 1

        dtpFechaFin.MaxDate = Date.Today
        dtpFechaInicio.MaxDate = Date.Today
        dtpNuevoIngreso.MaxDate = Date.Today

        grd.Columns(5).Visible = False

    End Sub

    Private Sub txtid_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) _
    Handles txtCODIGO.KeyPress
        If e.KeyChar = ChrW(Keys.Enter) Then
            e.Handled = True
            SendKeys.Send("{TAB}")
        End If
    End Sub

    Private Sub dtpfecha_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dtpFechaInicio.KeyPress

        If e.KeyChar = ChrW(Keys.Enter) Then
            e.Handled = True
            SendKeys.Send("{TAB}")
        End If
    End Sub

    Private Sub dtpFECHA_ValueChanged(sender As Object, e As EventArgs) Handles dtpFechaInicio.ValueChanged
        If bolModo = True Then
            LimpiarGridItems(grdItems)
            LlenarGridItems(CType(cmbEmpleado.SelectedValue, Long))
        End If
    End Sub

    Private Sub dtpfechafin_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dtpFechaFin.KeyPress

        If e.KeyChar = ChrW(Keys.Enter) Then
            e.Handled = True
            SendKeys.Send("{TAB}")
        End If
    End Sub

    Private Sub dtpFECHAfin_ValueChanged(sender As Object, e As EventArgs) Handles dtpFechaFin.ValueChanged
        If bolModo = True Then
            LimpiarGridItems(grdItems)
            LlenarGridItems(CType(cmbEmpleado.SelectedValue, Long))
        End If
    End Sub


    Private Sub cmbClientes_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbEmpleado.SelectedIndexChanged
        If band = 1 Then
            If bolModo = True Then
                LlenarGridItems(CType(cmbEmpleado.SelectedValue, Long))
            End If

            lblHsNormales.Text = "0"
            lblHsExtras50.Text = "0"
            lblHsExtras100.Text = "0"

            lblMontoHsNormales.Text = "0"
            lblMontoHsExtras50.Text = "0"
            lblMontoHsExtras100.Text = "0"

            lblTotalConsolidacion.Text = "0"

        End If

    End Sub

    Private Sub grdItems_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles grdItems.CellClick
        If e.ColumnIndex = ColumnasDelGridItems.Consolidado + 1 Then
            Select Case ActualizarDiaTrabajado()
                Case Is <= 0
                    Util.MsgStatus(Status1, "No se pudo actualizar el registro.", My.Resources.Resources.stop_error.ToBitmap)
                Case Else
                    Util.MsgStatus(Status1, "Se actualizó correctamente la información del día seleccionado.", My.Resources.Resources.ok.ToBitmap)
                    LlenarGridItems(cmbEmpleado.SelectedValue)
            End Select
        End If
    End Sub

    Private Sub grdItems_CellValueChanged(sender As Object, e As DataGridViewCellEventArgs) Handles grdItems.CellValueChanged
        Try

            If e.ColumnIndex = ColumnasDelGridItems.Consolidado Then

                AgregarDiaConsolidado_tmp()

            End If

        Catch ex As Exception
            MsgBox("Error en Sub grdRemitos_CellClick", MsgBoxStyle.Critical, "Error")
        End Try
    End Sub

    Private Sub grdItems_CurrentCellDirtyStateChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles grdItems.CurrentCellDirtyStateChanged
        If grdItems.IsCurrentCellDirty Then
            grdItems.CommitEdit(DataGridViewDataErrorContexts.Commit)
        End If
    End Sub

    Protected Overloads Sub grd_CurrentCellChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles grd.CurrentCellChanged
        If Permitir Then

            Try
                LlenarGridItems(CType(cmbEmpleado.SelectedValue, Long))
            Catch ex As Exception
                LlenarGridItems(cmbEmpleado.SelectedValue)
            End Try

        End If
    End Sub

    Private Sub grdItems_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles grdItems.CellEndEdit
        editando_celda = False

        Try
            If e.ColumnIndex = ColumnasDelGridItems.Hora_Ingreso Or e.ColumnIndex = ColumnasDelGridItems.Hora_Egreso Then
                grdItems.CurrentCell = grdItems.CurrentRow.Cells(grdItems.Columns.Count - 1)
                grdItems_CellClick(sender, e)
            End If
        Catch ex As Exception

        End Try

    End Sub

    Private Sub grdItems_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles grdItems.EditingControlShowing

        ' referencia a la celda  
        Dim validar As TextBox = CType(e.Control, TextBox)

        ' agregar el controlador de eventos para el KeyPress  
        AddHandler validar.KeyPress, AddressOf validar_NumerosReales2

    End Sub

    Private Sub grdItems_CellBeginEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellCancelEventArgs) Handles grdItems.CellBeginEdit
        editando_celda = True
        'Contar_Filas()
    End Sub

    Private Sub grditems_CellMouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellMouseEventArgs) Handles grdItems.CellMouseUp
        Cell_X = e.ColumnIndex
        Cell_Y = e.RowIndex
    End Sub

    Private Sub grdItems_CurrentCellChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles grdItems.CurrentCellChanged
        If band = 0 Then Exit Sub
        Try
            Cell_Y = grdItems.CurrentRow.Index
        Catch ex As Exception

        End Try

    End Sub

#End Region

#Region "   Procedimientos"

    Private Sub configurarform()

        Me.grd.Location = New Size(GroupBox1.Location.X, GroupBox1.Location.Y + GroupBox1.Size.Height + 7)

        If LLAMADO_POR_FORMULARIO Then
            LLAMADO_POR_FORMULARIO = False
            Me.Top = ARRIBA
            Me.Left = IZQUIERDA
        Else
            Me.Top = 0
            Me.Left = (Screen.PrimaryScreen.WorkingArea.Width - Me.Width) \ 2
        End If

        Me.WindowState = FormWindowState.Maximized

        Me.grd.Size = New Size(Screen.PrimaryScreen.WorkingArea.Width - 27, Me.Size.Height - 7 - GroupBox1.Size.Height - GroupBox1.Location.Y - 65)

    End Sub

    Private Sub asignarTags()
        txtID.Tag = "0"
        txtCODIGO.Tag = "1"
        dtpFechaInicio.Tag = "3"
        dtpFechaFin.Tag = "4"
        cmbEmpleado.Tag = "6"
        lblHsNormales.Tag = "7"
        lblHsExtras50.Tag = "8"
        lblHsExtras100.Tag = "9"
        lblMontoHsNormales.Tag = "11"
        lblMontoHsExtras50.Tag = "12"
        lblMontoHsExtras100.Tag = "13"
        lblTotalConsolidacion.tag = "14"
    End Sub

    Private Sub Verificar_Datos()

        bolpoliticas = False

        If cmbEmpleado.SelectedValue Is Nothing Or cmbEmpleado.SelectedValue Is DBNull.Value Then
            MsgBox("Debe seleccionar un empleado para realizar la Consolidación.", MsgBoxStyle.Critical, "Atención")
            Exit Sub
        End If

        If dtpFechaInicio.Value.Date > dtpFechaFin.Value.Date Then
            MsgBox("La Fecha de Inicio del periodo no puede ser mayor a la Fecha de Fin.", MsgBoxStyle.Critical, "Atención")
            Exit Sub
        End If

        If grdItems.Rows.Count = 0 Then
            MsgBox("El empleado seleccionado no tiene días trabajados en el periodo especificado.", MsgBoxStyle.Critical, "Atención")
            Exit Sub
        End If

        Util.MsgStatus(Status1, "Verificando los datos...", My.Resources.Resources.indicator_white)

        bolpoliticas = True

    End Sub

    Private Sub Cerrar_Tran()
        'Cierra o finaliza la transaccion
        If Not (tran Is Nothing) Then
            tran.Commit()
            tran.Dispose()
            tran = Nothing
        End If
    End Sub

    Private Sub Cancelar_Tran()
        'Cancela la transaccion
        If Not (tran Is Nothing) Then
            tran.Rollback()
            tran.Dispose()
            tran = Nothing
        End If
    End Sub

    Private Sub PrepararGridItems()
        Util.LimpiarGridItems(grdItems)
    End Sub

    Private Sub LlenarGridItems(ByVal Id_Empleado As Long)

        If Id_Empleado = 0 Then
            Exit Sub
        End If

        If grdItems.Columns.Count > 0 Then
            grdItems.Columns.Clear()
        End If

        SQL = "exec [spAsistencias_Select_by_IdEmpleado] @IdEmpleado = " & Id_Empleado & ", @Inicio = '" & dtpFechaInicio.Value.ToShortDateString & "', @Fin = '" & dtpFechaFin.Value.ToShortDateString & "', @Modo = " & bolModo & ", @IdConsolidacion = " & IIf(txtID.Text = "", 0, txtID.Text)

        GetDatasetItems(grdItems)

        Dim colBoton As DataGridViewButtonColumn = New DataGridViewButtonColumn()
        With colBoton
            .HeaderText = "Acción"
            .DefaultCellStyle.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Bold)
            .UseColumnTextForButtonValue = True
            .AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
            .FlatStyle = FlatStyle.Popup
            .DefaultCellStyle.BackColor = Color.Red
            .CellTemplate.Style.BackColor = Color.Red
            .CellTemplate.Style.ForeColor = Color.White
            .DefaultCellStyle.SelectionBackColor = Color.Green
            .Text = "Guardar Cambio"
        End With
        
        grdItems.Columns.Insert(grdItems.Columns.Count, colBoton)

        'MsgBox(grdItems.Columns.Count)

        grdItems.Columns(ColumnasDelGridItems.Id).Visible = False

        grdItems.Columns(ColumnasDelGridItems.Id_Empleado).Visible = False

        grdItems.Columns(ColumnasDelGridItems.Fecha).Width = 70
        grdItems.Columns(ColumnasDelGridItems.Fecha).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        grdItems.Columns(ColumnasDelGridItems.Fecha).ReadOnly = True

        grdItems.Columns(ColumnasDelGridItems.Dia).Width = 60
        grdItems.Columns(ColumnasDelGridItems.dia).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        grdItems.Columns(ColumnasDelGridItems.Dia).ReadOnly = True

        grdItems.Columns(ColumnasDelGridItems.Hora_Ingreso).Width = 55
        grdItems.Columns(ColumnasDelGridItems.Hora_Ingreso).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter

        grdItems.Columns(ColumnasDelGridItems.Hora_Egreso).Width = 55
        grdItems.Columns(ColumnasDelGridItems.Hora_Egreso).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter

        grdItems.Columns(ColumnasDelGridItems.Llegada_Tarde).Width = 55

        grdItems.Columns(ColumnasDelGridItems.Justificada).Width = 50

        grdItems.Columns(ColumnasDelGridItems.Nota).Width = 170

        grdItems.Columns(ColumnasDelGridItems.PrecioHora).Width = 60
        grdItems.Columns(ColumnasDelGridItems.PrecioHora).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        grdItems.Columns(ColumnasDelGridItems.PrecioHora).ReadOnly = True

        grdItems.Columns(ColumnasDelGridItems.Horas_Normales).Width = 65
        grdItems.Columns(ColumnasDelGridItems.Horas_Normales).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter

        grdItems.Columns(ColumnasDelGridItems.Horas_Extras_50).Width = 70
        grdItems.Columns(ColumnasDelGridItems.Horas_Extras_50).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter

        grdItems.Columns(ColumnasDelGridItems.Horas_Extras_100).Width = 65
        grdItems.Columns(ColumnasDelGridItems.Horas_Extras_100).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter

        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Normales).Width = 70
        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Normales).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight
        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Normales).ReadOnly = True

        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Ext_50).Width = 65
        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Ext_50).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight
        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Ext_50).ReadOnly = True

        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Ext_100).Width = 65
        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Ext_100).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight
        grdItems.Columns(ColumnasDelGridItems.Monto_Hs_Ext_100).ReadOnly = True

        grdItems.Columns(ColumnasDelGridItems.Total_dia).Width = 70
        grdItems.Columns(ColumnasDelGridItems.Total_dia).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight
        grdItems.Columns(ColumnasDelGridItems.Total_dia).ReadOnly = True

        grdItems.Columns(ColumnasDelGridItems.Consolidado).Width = 75


        With grdItems
            .VirtualMode = False
            .AllowUserToAddRows = False
            .AlternatingRowsDefaultCellStyle.BackColor = Color.AliceBlue
            .RowsDefaultCellStyle.BackColor = Color.White
            .AllowUserToOrderColumns = True
            .SelectionMode = DataGridViewSelectionMode.CellSelect
            .ForeColor = Color.Black
            .ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        End With

        With grdItems.ColumnHeadersDefaultCellStyle
            .BackColor = Color.Black  'Color.BlueViolet
            .ForeColor = Color.White
            .Font = New Font("TAHOMA", 8, FontStyle.Bold)
        End With

        grdItems.Font = New Font("TAHOMA", 8, FontStyle.Regular)

        SQL = "exec spIngresos_Select_All @Eliminado = 0"

    End Sub

    Private Sub GetDatasetItems(ByVal grdchico As DataGridView)
        Dim connection As SqlClient.SqlConnection = Nothing

        Try
            connection = SqlHelper.GetConnection(ConnStringSEI)
        Catch ex As Exception
            MessageBox.Show("No se pudo conectar con la Base de Datos. Consulte con su Administrador.", "Error de Conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try

        Try
            ds_2 = SqlHelper.ExecuteDataset(connection, CommandType.Text, SQL)
            ds_2.Dispose()

            grdchico.DataSource = ds_2.Tables(0).DefaultView

        Catch ex As Exception
            Dim errMessage As String = ""
            Dim tempException As Exception = ex

            While (Not tempException Is Nothing)
                errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                tempException = tempException.InnerException
            End While

            MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
              + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
              "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)
        Finally
            If Not connection Is Nothing Then
                CType(connection, IDisposable).Dispose()
            End If
        End Try

    End Sub

    Private Sub LlenarComboEmpleados()
        Dim ds_Cli As Data.DataSet
        Dim connection As SqlClient.SqlConnection = Nothing

        Try
            connection = SqlHelper.GetConnection(ConnStringSEI)
        Catch ex As Exception
            MessageBox.Show("No se pudo conectar con la Base de Datos. Consulte con su Administrador.", "Error de Conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try

        Try

            'ds_Cli = SqlHelper.ExecuteDataset(connection, CommandType.Text, "SELECT DISTINCT c.ID, c.nombre FROM Asistencias F  " & _
            '                                                         " JOIN Empleados c ON c.ID = F.Id_Empleado WHERE f.eliminado = 0 order by C.NOMBRE")

            ds_Cli = SqlHelper.ExecuteDataset(connection, CommandType.Text, "SELECT c.ID, (Apellido + ', ' + c.nombre) as Empleado FROM Empleados c WHERE c.eliminado = 0 order by Empleado")

            ds_Cli.Dispose()

            With Me.cmbEmpleado
                .DataSource = ds_Cli.Tables(0).DefaultView
                .DisplayMember = "Empleado"
                .ValueMember = "id"
            End With

        Catch ex As Exception
            Dim errMessage As String = ""
            Dim tempException As Exception = ex

            While (Not tempException Is Nothing)
                errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                tempException = tempException.InnerException
            End While

            MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
              + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
              "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)
        Finally
            If Not connection Is Nothing Then
                CType(connection, IDisposable).Dispose()
            End If
        End Try

    End Sub

    Private Sub validar_NumerosReales2( _
      ByVal sender As Object, _
      ByVal e As System.Windows.Forms.KeyPressEventArgs)

        ' obtener indice de la columna  
        Dim columna As Integer = grdItems.CurrentCell.ColumnIndex

        ' comprobar si la celda en edición corresponde a la columna 1 o 3  
        If columna = ColumnasDelGridItems.Hora_Egreso Or columna = ColumnasDelGridItems.Hora_Ingreso Or columna = ColumnasDelGridItems.Horas_Extras_100 Or _
                columna = ColumnasDelGridItems.Horas_Extras_50 Or columna = ColumnasDelGridItems.Horas_Normales Or columna = ColumnasDelGridItems.Monto_Hs_Ext_100 Or _
                columna = ColumnasDelGridItems.Monto_Hs_Ext_50 Or columna = ColumnasDelGridItems.Monto_Hs_Normales Or columna = ColumnasDelGridItems.Fecha Then

            Dim caracter As Char = e.KeyChar

            ' referencia a la celda  
            Dim txt As TextBox = CType(sender, TextBox)

            ' comprobar si es un número con isNumber, si es el backspace, si el caracter  
            ' es el separador decimal, y que no contiene ya el separador  
            If (Char.IsNumber(caracter)) Or _
               (caracter = ChrW(Keys.Back)) Or _
               (caracter = ":") And _
               (txt.Text.Contains(":") = False) Then
                e.Handled = False
            Else
                e.Handled = True
            End If
        End If
    End Sub

    Private Function AgregarDiaConsolidado_tmp() As Integer
        Dim connection As SqlClient.SqlConnection = Nothing
        Dim I As Integer
        Dim Totaldia As Double = 0, TotalHsNormales As Double = 0, MontoHsNormales As Double = 0
        Dim TotalHs50 As Double = 0, MontoHs50 As Double = 0
        Dim TotalHs100 As Double = 0, MontoHs100 As Double = 0

        Try

            Try
                connection = SqlHelper.GetConnection(ConnStringSEI)
            Catch ex As Exception
                MessageBox.Show("No se pudo conectar con la Base de Datos. Consulte con su Administrador.", "Error de Conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Function
            End Try

            Try
                SqlHelper.ExecuteNonQuery(connection, CommandType.StoredProcedure, "spConsolidaciones_DELETE_tmp")

            Catch ex As Exception
                Throw ex
            End Try


            For I = 0 To grdItems.RowCount - 1

                If CBool(grdItems.Rows(I).Cells(ColumnasDelGridItems.Consolidado).Value) = True Then


                    Dim param_id As New SqlClient.SqlParameter
                    param_id.ParameterName = "@IdConsolidacion"
                    param_id.SqlDbType = SqlDbType.BigInt
                    param_id.Value = grdItems.Rows(I).Cells(ColumnasDelGridItems.Id).Value
                    param_id.Direction = ParameterDirection.Input

                    TotalHsNormales = TotalHsNormales + grdItems.Rows(I).Cells(ColumnasDelGridItems.Horas_Normales).Value
                    TotalHs50 = TotalHs50 + grdItems.Rows(I).Cells(ColumnasDelGridItems.Horas_Extras_50).Value
                    TotalHs100 = TotalHs100 + grdItems.Rows(I).Cells(ColumnasDelGridItems.Horas_Extras_100).Value

                    MontoHsNormales = MontoHsNormales + grdItems.Rows(I).Cells(ColumnasDelGridItems.Monto_Hs_Normales).Value
                    MontoHs50 = MontoHs50 + grdItems.Rows(I).Cells(ColumnasDelGridItems.Monto_Hs_Ext_50).Value
                    MontoHs100 = MontoHs100 + grdItems.Rows(I).Cells(ColumnasDelGridItems.Monto_Hs_Ext_100).Value

                    Totaldia = Totaldia + grdItems.Rows(I).Cells(ColumnasDelGridItems.Total_dia).Value

                    Try
                        SqlHelper.ExecuteNonQuery(connection, CommandType.StoredProcedure, "spConsolidaciones_Insert_tmp", _
                                                  param_id)

                    Catch ex As Exception
                        Throw ex
                        Exit For
                    End Try
                Else
                    If bolModo = False Then


                    End If
                End If

            Next

            lblHsNormales.Text = TotalHsNormales
            lblHsExtras50.Text = TotalHs50
            lblHsExtras100.Text = TotalHs100

            lblMontoHsNormales.Text = MontoHsNormales
            lblMontoHsExtras50.Text = MontoHs50
            lblMontoHsExtras100.Text = MontoHs100

            lblTotalConsolidacion.Text = Totaldia

        Catch ex As Exception
            Dim errMessage As String = ""
            Dim tempException As Exception = ex

            While (Not tempException Is Nothing)
                errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                tempException = tempException.InnerException
            End While

            MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
              + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
              "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)
        Finally
            If Not connection Is Nothing Then
                CType(connection, IDisposable).Dispose()
            End If
        End Try

    End Function

#End Region

#Region "   Funciones"

    Private Function AgregarRegistro_Consolidacion() As Integer

        'Dim connection As SqlClient.SqlConnection = Nothing
        Dim res As Integer = 0

        Try
            Try
                conn_del_form = SqlHelper.GetConnection(ConnStringSEI)
            Catch ex As Exception
                MessageBox.Show("No se pudo conectar con la base de datos", "Error de conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Function
            End Try

            'Abrir una transaccion para guardar y asegurar que se guarda todo
            If Abrir_Tran(conn_del_form) = False Then
                MessageBox.Show("No se pudo abrir una transaccion", "Error de conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Function
            End If


            Try
                Dim param_id As New SqlClient.SqlParameter
                param_id.ParameterName = "@id"
                param_id.SqlDbType = SqlDbType.BigInt
                param_id.Value = DBNull.Value
                param_id.Direction = ParameterDirection.InputOutput

                Dim param_idempleado As New SqlClient.SqlParameter
                param_idempleado.ParameterName = "@idEmpleado"
                param_idempleado.SqlDbType = SqlDbType.BigInt
                param_idempleado.Value = cmbEmpleado.SelectedValue
                param_idempleado.Direction = ParameterDirection.Input

                Dim param_FechaInicio As New SqlClient.SqlParameter
                param_FechaInicio.ParameterName = "@FechaInicio"
                param_FechaInicio.SqlDbType = SqlDbType.Date
                param_FechaInicio.Value = dtpFechaInicio.Value
                param_FechaInicio.Direction = ParameterDirection.Input

                Dim param_FechaFin As New SqlClient.SqlParameter
                param_FechaFin.ParameterName = "@FechaFin"
                param_FechaFin.SqlDbType = SqlDbType.Date
                param_FechaFin.Value = dtpFechaFin.Value
                param_FechaFin.Direction = ParameterDirection.Input

                Dim param_hsnormales As New SqlClient.SqlParameter
                param_hsnormales.ParameterName = "@Horas_Normales"
                param_hsnormales.SqlDbType = SqlDbType.Decimal
                param_hsnormales.Precision = 18
                param_hsnormales.Scale = 2
                param_hsnormales.Value = CDbl(lblHsNormales.Text)
                param_hsnormales.Direction = ParameterDirection.Input

                Dim param_hsextras50 As New SqlClient.SqlParameter
                param_hsextras50.ParameterName = "@Horas_Extras_50"
                param_hsextras50.SqlDbType = SqlDbType.Decimal
                param_hsextras50.Precision = 18
                param_hsextras50.Scale = 2
                param_hsextras50.Value = CDbl(lblHsExtras50.Text)
                param_hsextras50.Direction = ParameterDirection.Input

                Dim param_hsextras100 As New SqlClient.SqlParameter
                param_hsextras100.ParameterName = "@Horas_Extras_100"
                param_hsextras100.SqlDbType = SqlDbType.Decimal
                param_hsextras100.Precision = 18
                param_hsextras100.Scale = 2
                param_hsextras100.Value = CDbl(lblHsExtras100.Text)
                param_hsextras100.Direction = ParameterDirection.Input

                Dim param_montohora As New SqlClient.SqlParameter
                param_montohora.ParameterName = "@Monto_Hora"
                param_montohora.SqlDbType = SqlDbType.Decimal
                param_montohora.Precision = 18
                param_montohora.Scale = 2
                param_montohora.Value = grdItems.Rows(0).Cells(ColumnasDelGridItems.PrecioHora).Value
                param_montohora.Direction = ParameterDirection.Input

                Dim param_total_hs_Normales As New SqlClient.SqlParameter
                param_total_hs_Normales.ParameterName = "@Total_Hs_Normales"
                param_total_hs_Normales.SqlDbType = SqlDbType.Decimal
                param_total_hs_Normales.Precision = 18
                param_total_hs_Normales.Scale = 2
                param_total_hs_Normales.Value = CDbl(lblMontoHsNormales.Text)
                param_total_hs_Normales.Direction = ParameterDirection.Input

                Dim param_total_hs_extras_50 As New SqlClient.SqlParameter
                param_total_hs_extras_50.ParameterName = "@Total_Hs_Extras_50"
                param_total_hs_extras_50.SqlDbType = SqlDbType.Decimal
                param_total_hs_extras_50.Precision = 18
                param_total_hs_extras_50.Scale = 2
                param_total_hs_extras_50.Value = CDbl(lblMontoHsExtras50.Text)
                param_total_hs_extras_50.Direction = ParameterDirection.Input

                Dim param_total_hs_extras_100 As New SqlClient.SqlParameter
                param_total_hs_extras_100.ParameterName = "@Total_Hs_Extras_100"
                param_total_hs_extras_100.SqlDbType = SqlDbType.Decimal
                param_total_hs_extras_100.Precision = 18
                param_total_hs_extras_100.Scale = 2
                param_total_hs_extras_100.Value = CDbl(lblMontoHsExtras100.Text)
                param_total_hs_extras_100.Direction = ParameterDirection.Input

                Dim param_res As New SqlClient.SqlParameter
                param_res.ParameterName = "@res"
                param_res.SqlDbType = SqlDbType.Int
                param_res.Value = DBNull.Value
                param_res.Direction = ParameterDirection.InputOutput

                Try

                    SqlHelper.ExecuteNonQuery(tran, CommandType.StoredProcedure, "spConsolidaciones_Insert", _
                                          param_id, param_idempleado, param_FechaInicio, param_FechaFin, param_hsnormales, _
                                          param_hsextras50, param_hsextras100, _
                                          param_montohora, param_total_hs_Normales, param_total_hs_extras_50, param_total_hs_extras_100, _
                                          param_res)

                    txtID.Text = param_id.Value

                    AgregarRegistro_Consolidacion = param_res.Value

                Catch ex As Exception
                    Throw ex
                End Try
            Finally

            End Try
        Catch ex As Exception
            Dim errMessage As String = ""
            Dim tempException As Exception = ex

            While (Not tempException Is Nothing)
                errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                tempException = tempException.InnerException
            End While

            MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
              + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
              "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try
    End Function

    Private Function AgregarRegistro_Items() As Integer
        Dim res As Integer = 0
        Dim i As Integer

        Try
            Try
                For i = 0 To grdItems.RowCount - 1

                    If grdItems.Rows(i).Cells(ColumnasDelGridItems.Consolidado).Value = True Then

                        Dim param_idConsolidacion As New SqlClient.SqlParameter
                        param_idConsolidacion.ParameterName = "@idConsolidacion"
                        param_idConsolidacion.SqlDbType = SqlDbType.BigInt
                        param_idConsolidacion.Value = txtID.Text
                        param_idConsolidacion.Direction = ParameterDirection.Input

                        Dim param_IdAsistencia As New SqlClient.SqlParameter
                        param_IdAsistencia.ParameterName = "@IdAsistencia"
                        param_IdAsistencia.SqlDbType = SqlDbType.BigInt
                        param_IdAsistencia.Value = grdItems.Rows(i).Cells(ColumnasDelGridItems.Id).Value
                        param_IdAsistencia.Direction = ParameterDirection.Input

                        Dim param_hsnormales As New SqlClient.SqlParameter
                        param_hsnormales.ParameterName = "@Horas_Normales"
                        param_hsnormales.SqlDbType = SqlDbType.Decimal
                        param_hsnormales.Precision = 18
                        param_hsnormales.Scale = 2
                        param_hsnormales.Value = grdItems.Rows(i).Cells(ColumnasDelGridItems.Horas_Normales).Value
                        param_hsnormales.Direction = ParameterDirection.Input

                        Dim param_hsextras50 As New SqlClient.SqlParameter
                        param_hsextras50.ParameterName = "@Horas_Extras_50"
                        param_hsextras50.SqlDbType = SqlDbType.Decimal
                        param_hsextras50.Precision = 18
                        param_hsextras50.Scale = 2
                        param_hsextras50.Value = grdItems.Rows(i).Cells(ColumnasDelGridItems.Horas_Extras_50).Value
                        param_hsextras50.Direction = ParameterDirection.Input

                        Dim param_hsextras100 As New SqlClient.SqlParameter
                        param_hsextras100.ParameterName = "@Horas_Extras_100"
                        param_hsextras100.SqlDbType = SqlDbType.Decimal
                        param_hsextras100.Precision = 18
                        param_hsextras100.Scale = 2
                        param_hsextras100.Value = grdItems.Rows(i).Cells(ColumnasDelGridItems.Horas_Extras_100).Value
                        param_hsextras100.Direction = ParameterDirection.Input

                        Dim param_res As New SqlClient.SqlParameter
                        param_res.ParameterName = "@res"
                        param_res.SqlDbType = SqlDbType.Int
                        param_res.Value = DBNull.Value
                        param_res.Direction = ParameterDirection.InputOutput

                        Try

                            SqlHelper.ExecuteNonQuery(tran, CommandType.StoredProcedure, "spAsistencias_Consolidaciones_Update", _
                                                      param_IdAsistencia, param_idConsolidacion, param_hsnormales, param_hsextras50, _
                                                      param_hsextras100, param_res)

                            res = param_res.Value

                            If (res <= 0) Then
                                Exit For
                            End If

                        Catch ex As Exception
                            Throw ex
                        End Try
                    End If

                Next

                AgregarRegistro_Items = res

            Catch ex2 As Exception
                Throw ex2
            Finally

            End Try
        Catch ex As Exception
            Dim errMessage As String = ""
            Dim tempException As Exception = ex

            While (Not tempException Is Nothing)
                errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                tempException = tempException.InnerException
            End While

            MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
              + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
              "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Function

    Private Function ActualizarDiaTrabajado() As Integer
        Dim res As Integer = 0

        Try

            Dim connection As SqlClient.SqlConnection = Nothing

            Try
                connection = SqlHelper.GetConnection(ConnStringSEI)
            Catch ex As Exception
                MessageBox.Show("No se pudo conectar con la base de datos", "Error de conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Function
            End Try

            Dim param_id As New SqlClient.SqlParameter
            param_id.ParameterName = "@idasistencia"
            param_id.SqlDbType = SqlDbType.BigInt
            param_id.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Id).Value
            param_id.Direction = ParameterDirection.Input

            Dim param_HoraIngreso As New SqlClient.SqlParameter
            param_HoraIngreso.ParameterName = "@Hora_Ingreso"
            param_HoraIngreso.SqlDbType = SqlDbType.Time
            param_HoraIngreso.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Hora_Ingreso).Value
            param_HoraIngreso.Direction = ParameterDirection.Input

            Dim param_HoraEgreso As New SqlClient.SqlParameter
            param_HoraEgreso.ParameterName = "@Hora_Egreso"
            param_HoraEgreso.SqlDbType = SqlDbType.Time
            param_HoraEgreso.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Hora_Egreso).Value
            param_HoraEgreso.Direction = ParameterDirection.Input

            Dim param_LlegadaTarde As New SqlClient.SqlParameter
            param_LlegadaTarde.ParameterName = "@LlegadaTarde"
            param_LlegadaTarde.SqlDbType = SqlDbType.Bit
            param_LlegadaTarde.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Llegada_Tarde).Value
            param_LlegadaTarde.Direction = ParameterDirection.Input

            Dim param_Justificada As New SqlClient.SqlParameter
            param_Justificada.ParameterName = "@Justificada"
            param_Justificada.SqlDbType = SqlDbType.Bit
            param_Justificada.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Justificada).Value
            param_Justificada.Direction = ParameterDirection.Input

            Dim param_HsNormales As New SqlClient.SqlParameter
            param_HsNormales.ParameterName = "@HsNormales"
            param_HsNormales.SqlDbType = SqlDbType.Int
            param_HsNormales.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Horas_Normales).Value
            param_HsNormales.Direction = ParameterDirection.Input

            Dim param_HsExtras50 As New SqlClient.SqlParameter
            param_HsExtras50.ParameterName = "@HsExtra50"
            param_HsExtras50.SqlDbType = SqlDbType.Int
            param_HsExtras50.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Horas_Extras_50).Value
            param_HsExtras50.Direction = ParameterDirection.Input

            Dim param_HsExtras100 As New SqlClient.SqlParameter
            param_HsExtras100.ParameterName = "@HsExtra100"
            param_HsExtras100.SqlDbType = SqlDbType.Int
            param_HsExtras100.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Horas_Extras_100).Value
            param_HsExtras100.Direction = ParameterDirection.Input

            Dim param_Nota As New SqlClient.SqlParameter
            param_Nota.ParameterName = "@Nota"
            param_Nota.SqlDbType = SqlDbType.VarChar
            param_Nota.Size = 300
            param_Nota.Value = grdItems.CurrentRow.Cells(ColumnasDelGridItems.Nota).Value
            param_Nota.Direction = ParameterDirection.Input

            Dim param_res As New SqlClient.SqlParameter
            param_res.ParameterName = "@res"
            param_res.SqlDbType = SqlDbType.Int
            param_res.Value = DBNull.Value
            param_res.Direction = ParameterDirection.InputOutput


            SqlHelper.ExecuteNonQuery(connection, CommandType.StoredProcedure, "spAsistencias_Empleados_Update", _
                                      param_id, param_HoraEgreso, param_HoraIngreso, param_LlegadaTarde, _
                                      param_Justificada, param_HsNormales, param_HsExtras50, param_HsExtras100, param_Nota, param_res)

            res = param_res.Value


            ActualizarDiaTrabajado = res


        Catch ex As Exception
            Dim errMessage As String = ""
            Dim tempException As Exception = ex

            While (Not tempException Is Nothing)
                errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                tempException = tempException.InnerException
            End While

            MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
              + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
              "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Function

    Private Function AgregarRegistro_DiaTrabajado() As Integer

        Try

            Dim connection As SqlClient.SqlConnection = Nothing

            Try
                connection = SqlHelper.GetConnection(ConnStringSEI)
            Catch ex As Exception
                MessageBox.Show("No se pudo conectar con la base de datos", "Error de conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Function
            End Try

            Dim param_id As New SqlClient.SqlParameter
            param_id.ParameterName = "@idempleado"
            param_id.SqlDbType = SqlDbType.BigInt
            param_id.Value = cmbEmpleado.SelectedValue
            param_id.Direction = ParameterDirection.Input

            Dim param_Fecha As New SqlClient.SqlParameter
            param_Fecha.ParameterName = "@Fecha"
            param_Fecha.SqlDbType = SqlDbType.Date
            param_Fecha.Value = dtpNuevoIngreso.Value.Date
            param_Fecha.Direction = ParameterDirection.Input

            Dim param_HoraIngreso As New SqlClient.SqlParameter
            param_HoraIngreso.ParameterName = "@HoraIngreso"
            param_HoraIngreso.SqlDbType = SqlDbType.Time
            param_HoraIngreso.Value = dtpHoraIngreso.Value.ToShortTimeString
            param_HoraIngreso.Direction = ParameterDirection.Input

            Dim param_HoraEgreso As New SqlClient.SqlParameter
            param_HoraEgreso.ParameterName = "@HoraEgreso"
            param_HoraEgreso.SqlDbType = SqlDbType.Time
            param_HoraEgreso.Value = dtpHoraSalida.Value.ToShortTimeString
            param_HoraEgreso.Direction = ParameterDirection.Input

            Dim param_res As New SqlClient.SqlParameter
            param_res.ParameterName = "@res"
            param_res.SqlDbType = SqlDbType.Int
            param_res.Value = DBNull.Value
            param_res.Direction = ParameterDirection.InputOutput


            SqlHelper.ExecuteNonQuery(connection, CommandType.StoredProcedure, "spAsistencias_Empleados_Insert", _
                                      param_id, param_Fecha, param_HoraEgreso, param_HoraIngreso, param_res)

            AgregarRegistro_DiaTrabajado = param_res.Value

        Catch ex As Exception
            Dim errMessage As String = ""
            Dim tempException As Exception = ex

            While (Not tempException Is Nothing)
                errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                tempException = tempException.InnerException
            End While

            MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
              + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
              "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Function

    Private Function EliminarRegistro() As Integer
        Dim res As Integer = 0

        Try
            Try
                conn_del_form = SqlHelper.GetConnection(ConnStringSEI)
            Catch ex As Exception
                MessageBox.Show("No se pudo conectar con la Base de Datos. Consulte con su Administrador.", "Error de Conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Function
            End Try

            'Abrir una transaccion para guardar y asegurar que se guarda todo
            If Abrir_Tran(conn_del_form) = False Then
                MessageBox.Show("No se pudo abrir una transaccion", "Error de conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Function
            End If

            Try

                Dim param_idPresGest As New SqlClient.SqlParameter("@id", SqlDbType.BigInt, ParameterDirection.Input)
                param_idPresGest.Value = CType(txtID.Text, Long)
                param_idPresGest.Direction = ParameterDirection.Input

                Dim param_userdel As New SqlClient.SqlParameter
                param_userdel.ParameterName = "@userdel"
                param_userdel.SqlDbType = SqlDbType.Int
                param_userdel.Value = UserID
                param_userdel.Direction = ParameterDirection.Input

                Dim param_res As New SqlClient.SqlParameter
                param_res.ParameterName = "@res"
                param_res.SqlDbType = SqlDbType.Int
                param_res.Value = DBNull.Value
                param_res.Direction = ParameterDirection.Output

                Try

                    SqlHelper.ExecuteNonQuery(tran, CommandType.StoredProcedure, "spIngresos_Delete", _
                                              param_idPresGest, param_userdel, param_res)

                    EliminarRegistro = param_res.Value

                Catch ex As Exception
                    '' 


                    Throw ex
                End Try
            Finally
                ''
            End Try
        Catch ex As Exception
            Dim errMessage As String = ""
            Dim tempException As Exception = ex

            While (Not tempException Is Nothing)
                errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                tempException = tempException.InnerException
            End While

            MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
              + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
              "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try
    End Function

    Private Function Abrir_Tran(ByRef cnn As SqlClient.SqlConnection) As Boolean
        If tran Is Nothing Then
            Try
                tran = cnn.BeginTransaction
                Abrir_Tran = True
            Catch ex As Exception
                Abrir_Tran = False
                Exit Function
            End Try
        End If
    End Function

#End Region

#Region "   Botones"

    Private Sub btnNuevo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnNuevo.Click
        band = 0
        bolModo = True

        chkNuevoIngreso.Enabled = True
        'Label14.Text = "Total por Pagar"

        grdItems.Enabled = bolModo
        cmbEmpleado.Enabled = bolModo
        dtpFechaInicio.Enabled = bolModo
        dtpFechaFin.Enabled = bolModo

        Util.MsgStatus(Status1, "Haga click en [Guardar] despues de completar los datos.")
        PrepararBotones()

        Util.LimpiarTextBox(Me.Controls)
        PrepararGridItems()

        lblHsNormales.Text = "0"
        lblHsExtras50.Text = "0"
        lblHsExtras100.Text = "0"

        lblMontoHsNormales.Text = "0"
        lblMontoHsExtras50.Text = "0"
        lblMontoHsExtras100.Text = "0"

        lblTotalConsolidacion.Text = "0"

        dtpFechaInicio.Value = Date.Today
        dtpFechaFin.Value = Date.Today

        cmbEmpleado.Focus()

        band = 1

        cmbClientes_SelectedIndexChanged(sender, e)

        chkNuevoIngreso_CheckedChanged(sender, e)

    End Sub

    Private Sub btnGuardar_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnGuardar.Click
        Dim res As Integer

        If bolModo = False Then
            MsgBox("No se puede modificar una consolidación", MsgBoxStyle.Critical, "Atención")
            Exit Sub
        End If

        Util.MsgStatus(Status1, "Controlando la información...", My.Resources.Resources.indicator_white)

        If ReglasNegocio() Then
            Verificar_Datos()
            If bolpoliticas Then
                Util.MsgStatus(Status1, "Guardando el registro...", My.Resources.Resources.indicator_white)
                res = AgregarRegistro_Consolidacion()
                Select Case res
                    Case Is <= 0
                        Cancelar_Tran()
                        Util.MsgStatus(Status1, "No se pudo insertar el encabezado de la consolidación.", My.Resources.Resources.stop_error.ToBitmap)
                    Case Else
                        Util.MsgStatus(Status1, "Guardando los movimientos asociados a la Consolidación...", My.Resources.Resources.indicator_white)
                        res = AgregarRegistro_Items()
                        Select Case res
                            Case Is <= 0
                                Cancelar_Tran()
                                Util.MsgStatus(Status1, "No se puede insertar el detalle de la consolidación.", My.Resources.Resources.stop_error.ToBitmap)
                            Case Else

                                Cerrar_Tran()

                                bolModo = False

                                PrepararBotones()

                                SQL = "exec spConsolidaciones_Select_All @Eliminado = 0"

                                btnActualizar_Click(sender, e)

                                Util.MsgStatus(Status1, "Se ha actualizado el registro.", My.Resources.Resources.ok.ToBitmap)

                                'grd_CurrentCellChanged(sender, e)

                        End Select
                End Select

                If Not conn_del_form Is Nothing Then
                    CType(conn_del_form, IDisposable).Dispose()
                End If
            End If 'If bolpoliticas Then
        End If 'If ReglasNegocio() Then

    End Sub

    Private Overloads Sub btnCancelar_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCancelar.Click
        LlenarGridItems(CType(cmbEmpleado.SelectedValue, Long))
        'LlenarGridItems(CType(grd.CurrentRow.Cells(19).Value, Long))

        grdItems.Enabled = bolModo

        dtpFechaInicio.Enabled = bolModo
        dtpFechaFin.Enabled = bolModo

    End Sub

    Private Sub btnEliminar_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnEliminar.Click
        Dim res As Integer

        If MessageBox.Show("Esta acción anulará el Pago y actualizará el estado de las Facturas/Consumos asociados." + vbCrLf + "Si existen Cheques vinculados y no fueron utilizados en otros pagos, serán eliminados, en caso contrario deberá Anular el movimiento donde estén dichos Cheques." + vbCrLf + "¿Está seguro que desea continuar?", "Atención", MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

            Util.MsgStatus(Status1, "Anulando el registro...", My.Resources.Resources.indicator_white)
            res = EliminarRegistro()
            Select Case res
                Case -8
                    Cancelar_Tran()
                    Util.MsgStatus(Status1, "Al menos un cheque asociado al Pago está involucrado en el Pago a un Proveedor. Anule el pago al proveedor para luego anular el pago del cliente.", My.Resources.Resources.stop_error.ToBitmap)
                    Util.MsgStatus(Status1, "Al menos un cheque asociado al Pago está involucrado en el Pago a un Proveedor. Anule el pago al proveedor para luego anular el pago del cliente.", My.Resources.Resources.stop_error.ToBitmap, True)
                Case 0
                    Cancelar_Tran()
                    Util.MsgStatus(Status1, "No pudo realizarse la anulación.", My.Resources.Resources.stop_error.ToBitmap)
                    Util.MsgStatus(Status1, "No pudo realizarse la anulación.", My.Resources.Resources.stop_error.ToBitmap, True)
                Case -1
                    Cancelar_Tran()
                    Util.MsgStatus(Status1, "No pudo realizarse la anulación.", My.Resources.Resources.stop_error.ToBitmap)
                    Util.MsgStatus(Status1, "No pudo realizarse la anulación.", My.Resources.Resources.stop_error.ToBitmap, True)
                Case Else
                    Cerrar_Tran()
                    bolModo = False
                    PrepararBotones()
                    btnActualizar_Click(sender, e)
                    'Setear_Grilla()
                    Util.MsgStatus(Status1, "Se anuló correctamente el movimiento de Pago.", My.Resources.Resources.ok.ToBitmap)
                    Util.MsgStatus(Status1, "Se anuló correctamente el movimiento de Pago.", My.Resources.Resources.ok.ToBitmap, True, True)
            End Select
            '
            ' cerrar la conexion si está abierta.
            '
            If Not conn_del_form Is Nothing Then
                CType(conn_del_form, IDisposable).Dispose()
            End If
        End If

    End Sub

    Private Sub btnGuardarIngreso_Click(sender As Object, e As EventArgs) Handles btnGuardarIngreso.Click

        If cmbEmpleado.SelectedValue Is Nothing Or cmbEmpleado.SelectedValue Is DBNull.Value Then
            MsgBox("Debe seleccionar un empleado.", MsgBoxStyle.Critical, "Atención")
            cmbEmpleado.Focus()
            Exit Sub
        End If

        If dtpHoraIngreso.Value > dtpHoraSalida.Value Then
            MsgBox("La hora de Entrada no puede ser mayor a la hora de Salida.", MsgBoxStyle.Critical, "Atención")
            dtpHoraIngreso.Focus()
            Exit Sub
        End If

        Select Case AgregarRegistro_DiaTrabajado()
            Case 0
                Util.MsgStatus(Status1, "No pudo realizarse la insersión.", My.Resources.Resources.stop_error.ToBitmap)
                Util.MsgStatus(Status1, "No pudo realizarse la insersión.", My.Resources.Resources.stop_error.ToBitmap, True)
            Case -2
                Util.MsgStatus(Status1, "Se produjo un error desconocido al querer insertar el registro.", My.Resources.Resources.stop_error.ToBitmap)
                Util.MsgStatus(Status1, "Se produjo un error desconocido al querer insertar el registro.", My.Resources.Resources.stop_error.ToBitmap, True)
            Case -3
                Util.MsgStatus(Status1, "La fecha ingresada ya tiene un movimiento asignado.", My.Resources.Resources.stop_error.ToBitmap)
                Util.MsgStatus(Status1, "La fecha ingresada ya tiene un movimiento asignado.", My.Resources.Resources.stop_error.ToBitmap, True)
            Case Else
                Util.MsgStatus(Status1, "Se insertó correctamente el movimiento.", My.Resources.Resources.ok.ToBitmap)
                LlenarGridItems(cmbEmpleado.SelectedValue)
                'bolModo = False
                chkNuevoIngreso.Checked = False
                chkNuevoIngreso_CheckedChanged(sender, e)
        End Select

    End Sub

    Private Sub btnImprimir_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnImprimir.Click

        Dim paramreporte As New frmParametros
        Dim rpt As New frmReportes
        Dim Cnn As New SqlConnection(ConnStringSEI)

        Dim Empleado As String

        Dim consulta As String = "select * from (select '' as Empleado UNION select (Apellido + ', ' + nombre) as Empleado from Empleados where eliminado = 0) rr order by Empleado asc"

        Dim Inicial As String = "01/" & Mid$(Now, 4, 2) & "/" & Mid$(Now, 7, 4)
        Dim Final As String = Mid$(Now, 1, 2) & "/" & Mid$(Now, 4, 2) & "/" & Mid$(Now, 7, 4)

        paramreporte.AgregarParametros("Inicio :", "DATE", "", False, Inicial, "", Cnn)
        paramreporte.AgregarParametros("Fin :", "DATE", "", False, Final, "", Cnn)
        paramreporte.AgregarParametros("Empleado :", "STRING", "", False, "", consulta, Cnn)

        paramreporte.ShowDialog()

        nbreformreportes = "Consolidaciones"

        Cursor = System.Windows.Forms.Cursors.WaitCursor

        If cerroparametrosconaceptar = True Then
            Inicial = paramreporte.ObtenerParametros(0).ToString
            Final = paramreporte.ObtenerParametros(1).ToString
            Empleado = paramreporte.ObtenerParametros(2).ToString

            rpt.Consolidaciones_App(Inicial, Final, Empleado, rpt, My.Application.Info.AssemblyName.ToString)

            cerroparametrosconaceptar = False
        End If

        'paramreporte = Nothing

        CType(paramreporte, IDisposable).Dispose()
        CType(Cnn, IDisposable).Dispose()

        Cursor = System.Windows.Forms.Cursors.Default
        'Cnn = Nothing

    End Sub

#End Region

    Protected Overrides Sub Finalize()
        MyBase.Finalize()
    End Sub

    Private Sub chkNuevoIngreso_CheckedChanged(sender As Object, e As EventArgs) Handles chkNuevoIngreso.CheckedChanged
        dtpHoraIngreso.Enabled = chkNuevoIngreso.Checked
        dtpHoraSalida.Enabled = chkNuevoIngreso.Checked
        btnGuardarIngreso.Enabled = chkNuevoIngreso.Checked
        dtpNuevoIngreso.Enabled = chkNuevoIngreso.Checked
        btnGuardarIngreso.Enabled = chkNuevoIngreso.Checked
    End Sub

    Private Sub grdItems_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles grdItems.CellContentClick
        If bolModo = True Then
            If e.ColumnIndex = ColumnasDelGridItems.Llegada_Tarde And grdItems.CurrentRow.Cells(ColumnasDelGridItems.Llegada_Tarde).Value = False Then

                'If MessageBox.Show("Desea modificar el horario de ingreso?", "Atención", MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

                Dim connection As SqlClient.SqlConnection = Nothing
                Dim ds As Data.DataSet

                Try
                    connection = SqlHelper.GetConnection(ConnStringSEI)
                Catch ex As Exception
                    MessageBox.Show("No se pudo conectar con la base de datos", "Error de conexión", MessageBoxButtons.OK, MessageBoxIcon.Error)
                    Exit Sub
                End Try

                Try
                    ds = SqlHelper.ExecuteDataset(connection, CommandType.Text, "DECLARE @HoraIngreso TIME(0) = (SELECT CONVERT (time(0), Hora_Ingreso) FROM Jornadas J JOIN Jornadas_Det JD ON J.Id = JD.IdJornada JOIN Empleados E ON E.Id_Jornada = J.Id WHERE E.ID = " + CStr(cmbEmpleado.SelectedValue) + " AND Dia = DATENAME(WEEKDAY, '" + grdItems.CurrentRow.Cells(ColumnasDelGridItems.Fecha).Value + "')) SELECT IIF(@HoraIngreso = '', '', @HoraIngreso)")
                    ds.Dispose()

                    Dim HoraIngresoEstrablecida = ds.Tables(0).Rows(0).Item(0).ToString

                    If HoraIngresoEstrablecida <> "" Then
                        If MessageBox.Show("Desea modificar el horario de ingreso?", "Atención", MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then
                            grdItems.CurrentRow.Cells(ColumnasDelGridItems.Hora_Ingreso).Value = HoraIngresoEstrablecida
                        Else
                            Exit Sub
                        End If
                    End If

                Catch ex As Exception
                    Dim errMessage As String = ""
                    Dim tempException As Exception = ex

                    While (Not tempException Is Nothing)
                        errMessage += tempException.Message + Environment.NewLine + Environment.NewLine
                        tempException = tempException.InnerException
                    End While

                    MessageBox.Show(String.Format("Se produjo un problema al procesar la información en la Base de Datos, por favor, valide el siguiente mensaje de error: {0}" _
                      + Environment.NewLine + "Si el problema persiste contáctese con MercedesIt a través del correo soporte@mercedesit.com", errMessage), _
                      "Error en la Aplicación", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Finally
                    If Not connection Is Nothing Then
                        CType(connection, IDisposable).Dispose()
                    End If
                End Try
            Else
                Exit Sub
            End If
        End If
        'End If
    End Sub

    Private Sub Imprimir()

    End Sub

End Class